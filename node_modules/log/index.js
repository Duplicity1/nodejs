/**
 * Created by fx-zzw on 2016/7/18.
 */
'use strict'
var winston = require('winston');
var util = require('util');
var conf = require('./conf');
var path = require('path');


var allTransport = null;//默认日志输出
var errorTransport = null;//默认异常捕捉输出
var mapTransports = {};

var consoleTransport = new (winston.transports.Console)({ level: 'debug' });

//轮询配置文件，得到当前所有的日志配置
for (var i in conf.logconfs) {
    var temp = conf.logconfs[i];
    setTransport(temp);
}

function setTransport(option) {
    if (option.name == 'all') {
        allTransport = new winston.transports.File(option);
    } else if (option.name == 'error') {
        errorTransport = new winston.transports.File(option);
        winston.handleExceptions([errorTransport]);
    } else {
        mapTransports[option.name] = new winston.transports.File(option);
    }
}
//根据文件名称，确定使用的输出transport
function foundTransport(fileName) {
    //console.log(fileName)
    var list = [];
    for (var i in mapTransports) {
        if (fileName.indexOf(i) > -1) {
            var temp = mapTransports[i];
            list.push(temp);
            break;
        }
    }
    return list;
}


var log = function (name,descName) {

    this.fileName = name;
    this.desc = descName;
    this.init();

}

log.prototype.fileName = null;
log.prototype.outlog = null;
log.prototype.init = function () {


    var list = foundTransport(this.fileName);
    if (list.length==0 && allTransport != null) {
        list.push(allTransport);
    }
    list.push(consoleTransport);
    this.outlog = new winston.Logger(
        {
            transports: list
        })
}

function createMessage(tell, msg,other) {
    var temp = " this.outlog." + tell + "(";
    for (var i = 0; i < msg.length; i++) {
        if (i == 0) {
            temp = temp + "'" + msg[i] + "'";
        } else {
            temp = temp + ",'" + msg[i] + "'";
        }
    }
    temp = temp+", '"+other+"'";
    temp = temp + ")";
    return temp;
}

log.prototype.info = function () {
    eval(createMessage('info', arguments,this.desc));
}

log.prototype.debug = function () {
    eval(createMessage('debug', arguments,this.desc));
}

log.prototype.error = function () {
    eval(createMessage('error', arguments,this.fileName));
}

module.exports = function (name) {
    //return new log( path.dirname(name),path.win32.basename(name));
    return new log( name,path.win32.basename(name));
};









